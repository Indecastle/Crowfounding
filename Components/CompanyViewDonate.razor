@inject ApplicationDbContext _db;
@inject AuthenticationStateProvider AuthenticationStateProvider;
@inject UserManager<User> _userManager;
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime;
@inject IStringLocalizer<Crowfounding.Pages.CompanyPages.CompanyView> L
@using System.ComponentModel.DataAnnotations;

@if (Model != null)
{
    <div class="page-header">
        <h3>@L["Donate_Title"] </h3>
    </div>
    <br>
    @if (!Model.IsEnd)
    {
<h3 class="text-center">@L["Donate_Money"]</h3>
        <div class="col-md-8"><h5>@L["Donate_Money"] @Model.CurrentMoney / @Model.NeedMoney</h5></div>
        <br>
        <div class="row">
            <EditForm Model="_viewModel" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="form-row align-items-center">
                    <div class="col-auto">
                        <label class="sr-only" for="inlineFormInputGroup">Donate2</label>
                        <div class="input-group mb-2">
                            <div class="input-group-prepend">
                                <div class="input-group-text">$</div>
                            </div>
                            <InputNumber class="form-control" id="inlineFormInputGroup" placeholder="Donate" @bind-Value="_viewModel.MonyDonate" />
                            <div class="input-group-append">
                                <div class="input-group-text">.00</div>
                            </div>
                        </div>
                    </div>
                    <div class="col-auto">
                        <button type="submit" class="btn btn-primary mb-2">Donate</button>
                    </div>
                </div>
                
            </EditForm>
            <br />
        </div>
        <br>
        <h3 class="text-center">Yandex</h3>
        <br>
        <iframe src="https://money.yandex.ru/quickpay/shop-widget?writer=seller&targets=Donation%20Company&targets-hint=&default-sum=1000&button-text=14&payment-type-choice=on&fio=on&mail=off&hint=&successURL=https%3A%2F%2Flocalhost%3A5001%2F&quickpay=shop&account=410017625025321" width="100%" height="223" frameborder="0" allowtransparency="true" scrolling="no"></iframe>
        <br>
        <h3 class="text-center">Scripe</h3>
        <br>
        <EditForm Model="_viewModel2" OnValidSubmit="HandleValidSubmit2">
            <DataAnnotationsValidator />
            <div class="">
                <label for="card-element">
                    Credit or debit card
                </label>
                <div id="card-element">
                    <!-- A Stripe Element will be inserted here. -->
                </div>

                <!-- Used to display form errors. -->
                <div id="card-errors" role="alert"></div>
            </div>
            <br>
            <label class="label label-default">Money:</label>
            <InputNumber aria-label="Amount (to the nearest dollar)" @bind-Value="_viewModel2.Total" />
            <input class="input-group-text d-inline-block" asp-for="Email" type="email" value="@User.UserName" disabled />
            <button type="submit" class="btn btn-danger">Submit Payment</button>
            <ValidationMessage For="@(() => _viewModel2.Total)" />
        </EditForm>
    }
    else
    {
        <h3 class="text-center text-danger"> @L["Donate_IsEnd"].</h3>
    }
}


@code {
    [Parameter]
    public Company Model { get; set; }
    [Parameter]
    public User User { get; set; }
    public DonateViewModel _viewModel = new DonateViewModel();
    public DonateViewModel2 _viewModel2 = new DonateViewModel2();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                await JsRuntime.InvokeVoidAsync("initCompanyViewDonate");
            }
            catch (JSException)
            {
            }

        }
    }

    private async Task HandleValidSubmit()
    {
        Model.CurrentMoney += _viewModel.MonyDonate;
        Donation donation = new Donation { CompanyId = Model.Id, UserId = User.Id, MonyDonate = _viewModel.MonyDonate };
        await _db.Donations.AddAsync(donation);
        await _db.SaveChangesAsync();
    }

    private async Task HandleValidSubmit2()
    {
        NavigationManager.NavigateTo("/");
    }

    public class DonateViewModel
    {
        [Required]
        [Range(10, 100000, ErrorMessage = "10-100000 $")]
        public int MonyDonate { get; set; }
    }

    public class DonateViewModel2
    {
        [Required]
        [Range(10, 100000, ErrorMessage = "10-100000 $")]
        public int Total { get; set; }
    }
}
