@inject ApplicationDbContext _db;
@inject AuthenticationStateProvider AuthenticationStateProvider;
@inject UserManager<User> _userManager;
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime;
@inject IMatToaster Toaster
@inject IFinanceService _financeService
@inject IStringLocalizer<Crowfounding.Pages.CompanyPages.CompanyView> L
@using System.ComponentModel.DataAnnotations;

@if (Model != null)
{
    <div class="page-header">
        <h3>@L["Donate_Title"] </h3>
    </div>
    <br>
    @if (!Model.IsEnd)
    {
        <h3 class="text-center">@L["Donate_Money"]</h3>
        <div class="col-md-8"><h5>@L["Donate_Money"] @UiUtil.FormatDecimal(Model.CurrentMoney)$ / @UiUtil.FormatDecimal(Model.NeedMoney)$</h5></div>
        <br>
        <div class="row">
            <EditForm Model="_viewModel" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="form-row align-items-center">
                    <div class="col-auto">
                        <label class="sr-only" for="inlineFormInputGroup">Donate2</label>
                        <div class="input-group mb-2">
                            <MatNumericUpDownField Label="Currency"
                                                   @bind-Value=_viewModel.MonyDonate
                                                   FieldType="MatNumericUpDownFieldType.Numeric"
                                                   DecimalPlaces=2>
                            </MatNumericUpDownField>
                        </div>
                    </div>
                    <div class="col-auto">
                        <MatButton Type="submit" Raised="false">@L["Donate"]</MatButton>
                    </div>
                </div>

            </EditForm>
            <br />
        </div>
    }
    else
    {
        <h3 class="text-center text-danger"> @L["Donate_IsEnd"].</h3>
    }
}


@code {
    [Parameter]
    public Company Model { get; set; }
    [Parameter]
    public User User { get; set; }
    public DonateViewModel _viewModel = new DonateViewModel();
    public DonateViewModel2 _viewModel2 = new DonateViewModel2();
    private bool locker = true;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        Toaster.Configuration.Position = MatToastPosition.TopCenter;
        Toaster.Configuration.PreventDuplicates = false;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task HandleValidSubmit()
    {
        if (locker)
        {
            if (User.Money < _viewModel.MonyDonate)
            {
                Show(L["No_money"], "", MatToastType.Danger, "accessible");
                return;
            }

            locker = false;
            await _financeService.DonateToCompany(User, Model, _viewModel.MonyDonate);
            locker = true;
        }
    }

    private async Task HandleValidSubmit2()
    {
        NavigationManager.NavigateTo("/");
    }

    public class DonateViewModel
    {
        [Required]
        [Range(10, 100000, ErrorMessage = "10-100000 $")]
        public decimal MonyDonate { get; set; }
    }

    public class DonateViewModel2
    {
        [Required]
        [Range(10, 100000, ErrorMessage = "10-100000 $")]
        public decimal Total { get; set; }
    }

    public void Show(string message, string title, MatToastType type, string icon = "")
    {
        Toaster.Add(message, type, title, icon, config =>
        {
            config.ShowCloseButton = true;
            config.ShowProgressBar = true;
            config.MaximumOpacity = 100;

            config.ShowTransitionDuration = 500;
            config.VisibleStateDuration = 5000;
            config.HideTransitionDuration = 500;

            config.RequireInteraction = false;

            if (false)
            {
                config.Onclick = toast =>
                {
                    Console.WriteLine($"Title: \"{toast.Title}\"; message: \"{toast.Message}\"; Type: {toast.Options.Type}");
                    return Task.CompletedTask;
                };
            }
        });
    }
}
