@inject ApplicationDbContext _db;
@inject AuthenticationStateProvider AuthenticationStateProvider;
@inject UserManager<User> _userManager;
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime;
@inject IStringLocalizer<UserMoneyAdd> L
@using System.ComponentModel.DataAnnotations;

@if (User != null)
{
    <div class="page-header">
        <h3>@L["UserFinance_Title"] </h3>
    </div>
    <br>
        <h3 class="text-center">@L["User_Money"]</h3>
        <div class="col-md-8"><h5>@L["User_Money"] @UiUtil.FormatDecimal(User.Money) $</h5></div>
        <br>
        <div class="row">
            <EditForm Model="_viewModel" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="form-row align-items-center">
                    <div class="col-auto">
                        <label class="sr-only" for="inlineFormInputGroup">Donate2</label>
                        <div class="input-group mb-2">
                            <MatNumericUpDownField Label="Currency"
                                                   @bind-Value=_viewModel.MonyDonate
                                                   FieldType="MatNumericUpDownFieldType.Numeric"
                                                   DecimalPlaces=2>
                            </MatNumericUpDownField>
                        </div>
                    </div>
                    <div class="col-auto">
                        <MatButton Type="submit" Raised="false">@L["Donate"]</MatButton>
                    </div>
                </div>

            </EditForm>
            <br />
        </div>
}


@code {
    [Parameter]
    public User User { get; set; }
    public DonateViewModel _viewModel = new DonateViewModel();
    private bool locker = true;
    private decimal _currency;
    public string Currency
    {
        get
        {
            return UiUtil.FormatDecimal(_currency);
        }
        set
        {
            _currency = decimal.Parse(value);
        }
    }


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                await JsRuntime.InvokeVoidAsync("initCompanyViewDonate");
            }
            catch (JSException)
            {
            }

        }
    }

    private async Task HandleValidSubmit()
    {
        if (locker)
        {
            if (_viewModel.MonyDonate.HasValue)
            {
                locker = false;
                User.Money += _viewModel.MonyDonate.Value;
                Transaction transaction = new Transaction
                {
                    CompanyId = null,
                    UserId = User.Id,
                    Amount = _viewModel.MonyDonate.Value,
                    When = DateTime.Now,
                    Type = TransactionType.User
                };
                await _db.Transactions.AddAsync(transaction);
                await _db.SaveChangesAsync();
                locker = true;
            }
        }
    }

    private async Task HandleValidSubmit2()
    {
        NavigationManager.NavigateTo("/");
    }

    public class DonateViewModel
    {
        [Required]
        [Range(10, 100000, ErrorMessage = "10-100000 $")]
        public decimal? MonyDonate { get; set; }
    }
}
