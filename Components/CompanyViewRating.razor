@using System.ComponentModel.DataAnnotations
@inject ApplicationDbContext _db;
@inject SingleCommentService _chatService;
@inject IStringLocalizer<Crowfounding.Pages.CompanyPages.CompanyView> L
@implements IDisposable

@if (User != null)
{
    @if (Rating?.CompanyRating > 0)
    {
    <h3>@L["Rating_YourRatingIs"] @Rating.CompanyRating: @Rating.When</h3>
    }
    else
    {
        <h3>@L["Rating_PleaseEnterRating"]</h3>
        <EditForm Model="_viewModel" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            @for (int i = 1; i <= 5; i++)
            {
                <div class="form-check">
                    <InputRadio class="form-check-input" name="exampleRadios" id='@($"exampleRadios{i}")' SelectedValue="i" @bind-Value="_viewModel.Rating" />
                    <label class="form-check-label" for='@($"exampleRadios{i}")'>@i</label>
                </div>
            }
            <button type="submit">@L["Rating_Submit"]</button>
        </EditForm>

    }
}

<br>
<div id="ratingview">
    @foreach (var rating in RatingsInViewModel)
    {
        <div class="container">
            <p class="text-left">@rating.User.UserName</p>
            <p class="text-left">@rating.CompanyRating</p>
            <span class="text-left">@rating.When.ToString()</span>
        </div>
    }
</div>

@code {
    [Parameter]
    public Company LocalCompany { get; set; }
    public Company TotalCompany { get; set; }
    [Parameter]
    public User User { get; set; }
    public RatingViewModel _viewModel = new RatingViewModel();

    public Rating Rating { get; set; }
    public List<Rating> RatingsInViewModel { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        TotalCompany = _chatService.TotalCompany;
        TotalCompany.UpdatedRating += UpdatedRating;
        UpdatedRating();


    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {

        }

    }

    public void Dispose()
    {
        if (TotalCompany != null)
        {
            TotalCompany.UpdatedRating -= UpdatedRating;
        }
    }


    public async void UpdatedRating()
    {
        if (User != null)
            Rating = _db.Ratings.FirstOrDefault(o => o.UserId == User.Id && o.CompanyId == LocalCompany.Id);
        RatingsInViewModel = _db.Ratings.Include(c => c.User).Where(c => c.CompanyId == LocalCompany.Id).Take(20).ToList();
        await InvokeAsync(StateHasChanged);
    }

    public async Task HandleValidSubmit()
    {
        Rating = new Rating
        {
            CompanyRating = _viewModel.Rating,
            User = User,
            UserId = User.Id,
            CompanyId = LocalCompany.Id,
            When = DateTime.Now
        };
        _db.Ratings.Add(Rating);
        //Company tempCompany = await _db.Companies.FirstOrDefaultAsync(c => c.Id == Company.Id);
        await _db.Entry(LocalCompany).ReloadAsync();
        CompanyBusinessLogic.UpdateRatingCompany(LocalCompany, Rating);
        _db.SaveChanges();
        TotalCompany.UpdateRating();
    }


    public class RatingViewModel
    {
        [Required]
        [Range(1, 5)]
        public int Rating { get; set; }
    }
}
