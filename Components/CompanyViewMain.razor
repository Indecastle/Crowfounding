@inject ApplicationDbContext _db;
@inject AuthenticationStateProvider AuthenticationStateProvider;
@inject UserManager<User> _userManager;
@inject NavigationManager NavigationManager
@inject SingleCommentService _chatService;
@inject IJSRuntime JsRuntime;
@inject IStringLocalizer<Crowfounding.Pages.CompanyPages.CompanyView> L

@if (LocalCompany != null)
{
    <div class="row">
        @if (LocalCompany.UserID == User?.Id && LocalCompany.IsEnd && !LocalCompany.IsDeleted)
        {
            <div class="m-auto">
                <button class="btn btn-danger" @onclick="RedirectToTakeMoney">@L["Main_TakeMoney"]</button>
            </div>
        }
        <div class="col-md-12 text-center">
            <h3>@L["Main_ThemeOfCompany"]: @LocalCompany.Theme</h3>
        </div>
    </div>

    <div class="row">
        <div class="col-md-8">
            <h4>@L["Main_RatingComapany"]: @LocalCompany.Rating </h4>
        </div>
        <div class="col-md-8">
            <h5>@L["Main_Money"] @LocalCompany.CurrentMoney / @LocalCompany.NeedMoney</h5>
        </div>

    </div>
    @if (LocalCompany.EndAtNextDay == true)
    {
        <h4 class="text-center text-danger"> @L["Main_Enformation1"]! </h4>
    }
    <hr/>
    <h3 class="text-center">@L["Main_Photos"]</h3>
    @if (LocalCompany.CompanyImages.Count > 0)
    {
        int count = 0;
        <div id="myCarousel" class="carousel slide" data-ride="carousel">
            <ol class="carousel-indicators">
                @for (int i = 0; i < LocalCompany.CompanyImages.Count; i++)
                {
                    if (i == 0)
                    {
                        <li data-target="#myCarousel" data-slide-to="@i" class="active"></li>
                    }
                    else
                    {
                        <li data-target="#myCarousel" data-slide-to="@i"></li>
                    }
                }
            </ol>
            <div class="carousel-inner">

                @foreach (var image in LocalCompany.CompanyImages)
                {
                    if (count == 0)
                    {
                        count++;
                        <div class="carousel-item active" style="transition: transform .6s ease-in-out,-webkit-transform .6s ease-in-out;">
                            <img src="@image.PhotoPath" class="carousel-image"/>
                        </div>
                    }
                    else
                    {
                        <div class="carousel-item " style="transition: transform .6s ease-in-out,-webkit-transform .6s ease-in-out;">
                            <img src="@image.PhotoPath" class="carousel-image"/>
                        </div>
                    }
                }
                <a class="carousel-mymove-left" href="#myCarousel" role="button" data-slide="prev">
                    <i class="fas fa-chevron-left fa-2x" style="color: darkgray"></i>
                    <span class="sr-only">Previous</span>
                </a>
                <a class="carousel-mymove-right" href="#myCarousel" role="button" data-slide="next">
                    <i class="fas fa-chevron-right fa-2x" style="color: darkgray"></i>
                    <span class="sr-only">Next</span>
                </a>
            </div>
        </div>
    }
    else
    {
        <h3 class="text-center">@L["Main_NoPhotos"]</h3>
    }

    <hr/>
    <h3 class="text-center">@L["Main_VideoCompany"]</h3>
    <iframe height="315" src="https://www.youtube.com/embed/@GetParameterFromQuery()"
            frameborder="0"
            style="margin: 0 auto; display: block; width: inherit;"
            allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture"
            allowfullscreen>
    </iframe>
    <hr/>


    <h3 class="text-center">@L["Main_Description"]</h3>
    <div>
        @ChatHelper.Parse(LocalCompany.Description)
    </div>

    <div class="border-top my-3">
        <MatAccordion>
            <MatExpansionPanel>
                <MatExpansionPanelSummary>
                    <MatExpansionPanelSubHeader>
                        <h3 class="mb-0">@L["Bonuses_Title"]</h3>
                    </MatExpansionPanelSubHeader>
                </MatExpansionPanelSummary>
                <MatExpansionPanelDetails>
                    <MatAccordion>
                        @foreach (var bonuse in LocalCompany.Bonuses)
                        {
                            <MatExpansionPanel>
                                <MatExpansionPanelSummary>
                                    <MatExpansionPanelHeader Style="white-space: nowrap; overflow-x: hidden; ">
                                        <h4 class="mb-0">@bonuse.Title</h4>
                                    </MatExpansionPanelHeader>
                                </MatExpansionPanelSummary>
                                <MatExpansionPanelDetails>
                                    <MatTextField @bind-Value="@bonuse.Title" ReadOnly="true" Label=@L["Title"] FullWidth="true"></MatTextField>
                                    <MatTextField @bind-Value="@bonuse.Definition" ReadOnly="true" Label=@L["Definition"] TextArea="true" FullWidth="true"></MatTextField>
                                    <MatTextField @bind-Value="@bonuse.Description" ReadOnly="true" Label=@L["Description"] TextArea="true" FullWidth="true"></MatTextField>
                                    <MatTextField @bind-Value="bonuse.NeedAmount"  ReadOnly="true" Label=@L["Need Amount"]></MatTextField  >
                                </MatExpansionPanelDetails>
                            </MatExpansionPanel>
                        }
                    </MatAccordion>
                </MatExpansionPanelDetails>
            </MatExpansionPanel>
        </MatAccordion>

    </div>
}

@code {

    [Parameter]
    public Company LocalCompany { get; set; }

    [Parameter]
    public User User { get; set; }


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
        }
    }

    public string GetParameterFromQuery()
    {
        try
        {
            Uri myUri = new Uri(LocalCompany.URLVideo);
            return HttpUtility.ParseQueryString(myUri.Query).Get("v");
        }
        catch (UriFormatException)
        {
            return HttpUtility.ParseQueryString(LocalCompany.URLVideo).Get("v");
        }
    }

    private void RedirectToTakeMoney()
    {
        NavigationManager.NavigateTo("/Company/TakeMoney/" + LocalCompany.Id);
    }

}