@page "/CompanyView"
@page "/CompanyView/{CompanyId:int}"
@inject ApplicationDbContext _db;
@inject AuthenticationStateProvider AuthenticationStateProvider;
@inject UserManager<User> _userManager;
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime;
@inject IStringLocalizer<CompanyView> L


    <div class="container">
        @if (Model != null)
        {

            <div class="row">
                <div class="col-md-12 text-center">
                    <h2>Company @Model.Name</h2>
                </div>
            </div>
        }
            <ul class="nav nav-tabs">
                <li class="nav-item">
                    <a class="nav-link @CheckActivePartial(1)" @onclick="(e => ActivePartial = 1)">Main</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link @CheckActivePartial(2)" @onclick="(e => ActivePartial = 2)">Comments</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link @CheckActivePartial(3)" @onclick="(e => ActivePartial = 3)">Donate</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link @CheckActivePartial(4)" @onclick="(e => ActivePartial = 4)">Rating</a>
                </li>
            </ul>


            @switch (ActivePartial)
            {
                case 1:<CompanyViewMain Model="Model" User="User" />
                    break;
                case 2: <CompanyViewComments LocalCompany="Model" user="User" />
                    break;
                case 3: <CompanyViewDonate Model="Model" User="User" />
                    break;
                case 4: <CompanyViewRating Company="Model" User="User" />
                    break;
            }
        </div>



@code {
    [Parameter]
    public int CompanyId { get; set; }
    [Parameter]
    public Company Model { get; set; }
    [Parameter]
    public User User { get; set; }


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var claimUser = authState.User;
        User = await _userManager.GetUserAsync(claimUser);

        Model = await _db.Companies.Include(c => c.CompanyImages).FirstOrDefaultAsync(c => c.Id == CompanyId);
        if(Model == null)
            NavigationManager.NavigateTo("");
    }

    private int ActivePartial { get; set; } = 1;
    private string CheckActivePartial(int partial)
    {
        return partial == ActivePartial ? "active disabled" : "";
    }
}
