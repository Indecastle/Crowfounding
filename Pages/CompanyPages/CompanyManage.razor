@page "/CompanyManage"
@inject ApplicationDbContext _db;
@inject AuthenticationStateProvider AuthenticationStateProvider;
@inject UserManager<User> _userManager;
@inject NavigationManager NavigationManager
@inject IStringLocalizer<CompanyManage> L

<div class="container-fluid">
    <div class="page-header">
        <h2>@L["Title"]</h2>
    </div>

    <div class="form-row align-items-center">
        <div class="col-auto my-1">
            <NavLink class="btn btn-primary" href="CreateCompany">@L["CreateCompany"]</NavLink>
        </div>
        <div class="col-sm-3 my-1">
            <input class="form-control" type="text" name="SearchString" @bind="SearchText" @oninput="(e => FilterFunc(e.Value.ToString()))" />
        </div>
        <div class="col-auto my-1">
            <div class="form-check mb-2">
                <input class="form-check-input" type="checkbox" id="OnlyMyCheck" @onchange="OnlyMyChange">
                <label class="form-check-label" for="OnlyMyCheck">
                    @L["CheckboxOnlyMy"]
                </label>
            </div>
        </div>
    </div>

    <hr />
    @if (CompaniesFilter != null)
    {
        <div>
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th scope="col">@L["Table_Name"]</th>
                        <th scope="col">@L["Table_Theme"]</th>
                        <th scope="col">@L["Table_End"]</th>
                        <th scope="col">@L["Table_Money"]</th>
                        <th scope="col">@L["Table_NeedMoney"]</th>
                        <th scope="col"></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var company in CompaniesFilter)
                    {
                        <tr @onclick="(e => RedirectToCompany(company.Id))">

                            <td>@company.Name</td>
                            <td>@company.Theme</td>
                            <td>@company.End.ToShortDateString()</td>
                            <td>@company.CurrentMoney</td>
                            <td>@company.NeedMoney</td>
                            @if (company.UserID == User.Id)
                            {
                                <td @onclick:stopPropagation>
                                    <NavLink class="btn btn-sm btn-info" href='@($"CreateCompany/edit/{company.Id}")'>@L["Edit"]</NavLink>
                                    <a class="btn btn-sm btn-danger" target="_top" href='@($"DeleteCompany{GetUri(company.Id)}")'>@L["Delete"]</a>
                                </td>
                            }
                            else
                            {
                                <td></td>
                            }
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>

@code {
    [Parameter]
    public User User { get; set; }
    [Parameter]
    public List<Company> Companies { get; set; }
    [Parameter]
    public string SearchText { get; set; }
    public List<Company> CompaniesFilter { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var claimUser = authState.User;
        User = await _userManager.GetUserAsync(claimUser);

        Companies = _db.Companies.Where(c => c.UserID == User.Id).ToList();
        CompaniesFilter = Companies;
        OnlyMyChange(new ChangeEventArgs { Value = false });
    }

    public async Task FilterFunc(string searchText)
    {
        CompaniesFilter = string.IsNullOrWhiteSpace(searchText) ? Companies : Companies.Where(c => c.Name.ToLower().Contains(searchText.ToLower())).ToList();
    }

    public void RedirectToCompany(int companyId)
    {
        NavigationManager.NavigateTo($"/CompanyView/{companyId}");
    }

    public string GetUri(int companyId)
    {
        var uri = new Uri(NavigationManager.Uri)
            .GetComponents(UriComponents.PathAndQuery, UriFormat.Unescaped);
        var query = $"?companyId={companyId}&" +
            $"redirectUri={Uri.EscapeDataString(uri)}";
        return query;
    }

    public async Task OnlyMyChange(ChangeEventArgs e)
    {
        if ((bool)e.Value)
            Companies = _db.Companies.Where(c => c.UserID == User.Id).ToList();
        else
        {
            Companies = _db.Companies.ToList();
            var MyCompanies = Companies.Where(c => c.UserID == User.Id).ToList();
            var NotMyCompanies = Companies.Except(MyCompanies).ToList();
            MyCompanies.Sort((c1, c2) => c1.Name.ToLower().CompareTo(c2.Name.ToLower()));
            NotMyCompanies.Sort((c1, c2) => c1.Name.CompareTo(c2.Name));
            Companies = MyCompanies;
            Companies.AddRange(NotMyCompanies);
        }
        CompaniesFilter = Companies;
        FilterFunc(SearchText);
        StateHasChanged();
    }
}
