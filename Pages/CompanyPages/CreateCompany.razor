@page "/CreateCompany"
@using BlazorInputFile;
@inject IS3Service _is3;
@inject ApplicationDbContext _db;
@inject AuthenticationStateProvider AuthenticationStateProvider;
@inject UserManager<User> _userManager;
@inject NavigationManager NavigationManager
@inject IStringLocalizer<CreateCompany> L
@attribute [Authorize]
<h2>CreateCompany</h2>

<EditForm EditContext="@_editContext" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        <label for="Nameid">Name:</label>

        <InputText @bind-Value="_viewModel.Name" id="Nameid" class="form-control" aria-describedby="name..." placeholder="name..." />
        <ValidationMessage For="@(() => _viewModel.Name)" />
    </div>
    <div class="form-group">
        <label for="selectid">Theme:</label>
        <InputSelect @bind-Value="_viewModel.Theme" class="form-control" id="selectid">
            <option value="@Theme.Education">Education</option>
            <option value="@Theme.Electronics">Electronics</option>
            <option value="@Theme.Food">Food</option>
            <option value="@Theme.ITcompany">ITcompany</option>
            <option value="@Theme.Service">Service</option>
        </InputSelect>
        <ValidationMessage For="@(() => _viewModel.Theme)" />
    </div>
    <div class="form-group shadow-textarea">
        <label for="DescrId">Description:</label>
        <InputTextArea class="form-control" rows="5" placeholder="Write Description with Markdown..." id="DescrId" @bind-Value="_viewModel.Description" />
        <ValidationMessage For="@(() => _viewModel.Description)" />
    </div>
    <div class="form-group">
        End:
        <InputDate class="form-control" @bind-Value="_viewModel.End" />
        <ValidationMessage For="@(() => _viewModel.End)" />
    </div>
    <div class="form-group">
        <label for="NeedMoneyid">NeedMoney:</label>
        <div class="input-group">
            <div class="input-group-prepend">
                <div class="input-group-text">$</div>
            </div>
            <InputNumber class="form-control" aria-label="Amount (to the nearest dollar)" id="NeedMoneyid" @bind-Value="_viewModel.NeedMoney" />
            <div class="input-group-append">
                <div class="input-group-text">.00</div>
            </div>
        </div>
        <ValidationMessage For="@(() => _viewModel.NeedMoney)" />
    </div>
    <div class="form-group">
        <label for="URLVideoid">URLVideo:</label>
        <InputText @bind-Value="_viewModel.URLVideo" class="form-control" id="URLVideoid" />
        <ValidationMessage For="@(() => _viewModel.URLVideo)" />
    </div>

    <div class="form-group">
        <div class="custom-file">
            <InputFile OnChange="LoadMainImage" class="custom-file-input" id="MainImageId" />
            <label class="custom-file-label" for="MainImageId">Choose Main Image...</label>
            <ValidationMessage For="@(() => _viewModel.isLoadedMainImage)" />
        </div>
    </div>
    <div class="form-group">
        <div class="custom-file">
            <InputFile multiple OnChange="LoadImages" class="custom-file-input" id="ImagesId" />
            <label class="custom-file-label" for="ImagesId">Choose images...</label>

        </div>
    </div>

    <div>
        <input class="btn btn-primary" type="submit" value="Create" />
    </div>
</EditForm>


@code {
    private CompanyViewModel _viewModel = new CompanyViewModel { Theme = Theme.Education };
    private EditContext _editContext;
    private IFileListEntry MainImage { get; set; }
    private IFileListEntry[] Images { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        _editContext = new EditContext(_viewModel);
    }

    private async Task HandleValidSubmit()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var claimUser = authState.User;
        var owner = await _userManager.GetUserAsync(claimUser);
        Company company = new Company { Name = _viewModel.Name, Theme = _viewModel.Theme, End = _viewModel.End, NumberUsers = 0,
            Rating = 0, Description = _viewModel.Description, CurrentMoney = 0, NeedMoney = _viewModel.NeedMoney, URLVideo = _viewModel.URLVideo,
            DataCreate = DateTime.Now, LastEdit = DateTime.MinValue, EndAtNextDay = false, IsEnd = false, UserID = owner.Id, MainImage = _viewModel.MainImage};
        if (_viewModel.Images != null)
        {
            company.CompanyImages = _viewModel.Images.Select(imgUrl => new ImagesCompany { PhotoPath = imgUrl }).ToList();
        }
        await _db.Companies.AddAsync(company);
        await _db.SaveChangesAsync();
        Console.WriteLine("OnValidSubmit @@@@@@@@@@@@@@@@@@@@@@@@@@@@");
        NavigationManager.NavigateTo("/");
    }

    async Task LoadMainImage(IFileListEntry[] files)
    {
        var file = files.FirstOrDefault();
        if (file != null)
        {
            using (var ms = new MemoryStream())
            {
                Task task1 = file.Data.CopyToAsync(ms);
                ms.Seek(0, SeekOrigin.Begin);
                await task1;
                Console.WriteLine("######### CopyEnded");
                string filePath = "TempFiles/" + $"{file.Name}-{Guid.NewGuid()}-{Path.GetExtension(file.Name)}";
                await _is3.UploadObjectAsync(ms, filePath);
                string urlLink = _is3.GeneratePreSignedURL(filePath, false, file.Name);
                Console.WriteLine("######### UploadedToS3");

                _viewModel.MainImage = urlLink;
                _viewModel.isLoadedMainImage = true;
                _editContext.Validate();
                StateHasChanged();
            }


        }
    }

    async Task LoadImages(IFileListEntry[] files)
    {
        List<string> urlLinks = new List<string>();
        if (files != null && files.Length > 0)
        {
            foreach(var file in files)
            {
                using (var ms = new MemoryStream())
                {
                    Task task1 = file.Data.CopyToAsync(ms);
                    ms.Seek(0, SeekOrigin.Begin);
                    await task1;
                    Console.WriteLine("######### CopyEnded");
                    string filePath = "TempFiles/" + $"{file.Name}-{Guid.NewGuid()}-{Path.GetExtension(file.Name)}";
                    await _is3.UploadObjectAsync(ms, filePath);
                    urlLinks.Add(_is3.GeneratePreSignedURL(filePath, false, file.Name));
                    Console.WriteLine("######### UploadedToS3");


                }
            }
            _viewModel.Images = urlLinks;
            Console.WriteLine("Images Loaded ------------------------------");
        }
    }
}
