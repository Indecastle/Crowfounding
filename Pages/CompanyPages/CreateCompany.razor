@page "/CreateCompany"
@page "/CreateCompany/Edit/{CompanyId:int}"
@using BlazorInputFile;
@inject IS3Service _is3;
@inject ApplicationDbContext _db;
@inject AuthenticationStateProvider AuthenticationStateProvider;
@inject UserManager<User> _userManager;
@inject NavigationManager NavigationManager
@inject IMatToaster Toaster
@inject ICompanyService _companyService
@inject IStringLocalizer<CreateCompany> L
@attribute [Authorize]
    <h2>@(isEditing ? L["Title_EditCompany"] : L["Title_CreateCompany"])</h2>

<div class="container">
    <EditForm EditContext="@_editContext" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div>
            <label for="Nameid">@L["Name"]:</label>

            <InputText @bind-Value="_viewModel.Name" id="Nameid" class="form-control" aria-describedby="name..." placeholder="@(L["Name"] + "...")" />
            <ValidationMessage For="@(() => _viewModel.Name)" />
        </div>
        <div class="form-group">
            <label for="selectid">@L["Theme"]:</label>
            <InputSelect @bind-Value="_viewModel.Theme" class="form-control" id="selectid">
                <option value="@Theme.Education">Education</option>
                <option value="@Theme.Electronics">Electronics</option>
                <option value="@Theme.Food">Food</option>
                <option value="@Theme.ITcompany">ITcompany</option>
                <option value="@Theme.Service">Service</option>
            </InputSelect>
            <ValidationMessage For="@(() => _viewModel.Theme)" />
        </div>
        <div class="form-group shadow-textarea">
            <label for="DescrId">@L["Description"]:</label>
            <InputTextArea class="form-control" rows="5" placeholder="@(L["Description"] + "...")" id="DescrId" @bind-Value="_viewModel.Description" />
            <ValidationMessage For="@(() => _viewModel.Description)" />
        </div>
        <div class="form-group">
            @L["DateEnd"]:
            <InputDate class="form-control" @bind-Value="_viewModel.End" />
            <ValidationMessage For="@(() => _viewModel.End)" />
        </div>
        <div class="form-group">
            <label for="NeedMoneyid">@L["NeedMoney"]:</label>
            <div class="input-group">
                <div class="input-group-prepend">
                    <div class="input-group-text">$</div>
                </div>
                <InputNumber class="form-control" aria-label="Amount (to the nearest dollar)" id="NeedMoneyid" @bind-Value="_viewModel.NeedMoney" />
                <div class="input-group-append">
                    <div class="input-group-text">$</div>
                </div>
            </div>
            <ValidationMessage For="@(() => _viewModel.NeedMoney)" />
        </div>
        <div class="form-group">
            <label for="URLVideoid">@L["URLVideo"]:</label>
            <InputText @bind-Value="_viewModel.URLVideo" class="form-control" id="URLVideoid" />
            <ValidationMessage For="@(() => _viewModel.URLVideo)" />
        </div>

        <div class="form-group">
            <div class="custom-file">
                <InputFile OnChange="LoadMainImage" class="custom-file-input" id="MainImageId" />
                <label class="custom-file-label" for="MainImageId">@L["Choose_MainImage"]...</label>
                <ValidationMessage For="@(() => _viewModel.isLoadedMainImage)" />
            </div>
        </div>
        <div class="form-group">
            <div class="custom-file">
                <InputFile multiple OnChange="LoadImages" class="custom-file-input" id="ImagesId" />
                <label class="custom-file-label" for="ImagesId">@L["Choose_Images"]...</label>

            </div>
        </div>

        <div class="border-top pb-3">
            <MatAccordion>
                <MatExpansionPanel>
                    <MatExpansionPanelSummary>
                        <MatExpansionPanelSubHeader>
                            <h3 class="mb-0">@L["Bonuses_Title"]</h3>
                        </MatExpansionPanelSubHeader>
                    </MatExpansionPanelSummary>
                    <MatExpansionPanelDetails>
                        <div @onclick:stopPropagation="true"
                             @onclick:preventDefault="true"
                             @onmousedown:stopPropagation="true"
                             @onmousedown:preventDefault="true">
                            <MatButton OnClick="@AddBonuse" Label="@L["CreateBonuse"]"></MatButton>
                        </div>
                        <MatAccordion>
                            @foreach (var bonuseVm in _viewModel.Bonuses)
                            {
                                <MatExpansionPanel>
                                    <MatExpansionPanelSummary>
                                        <MatExpansionPanelHeader Style="white-space: nowrap; overflow-x: hidden; ">
                                            <h4 class="mb-0">@bonuseVm.Title</h4>
                                        </MatExpansionPanelHeader>
                                    </MatExpansionPanelSummary>
                                    <MatExpansionPanelDetails>
                                        <MatTextField @bind-Value="@bonuseVm.Title" Label=@L["Bonuse_Title"] FullWidth="true"></MatTextField>
                                        <MatTextField @bind-Value="@bonuseVm.Definition" Label=@L["Bonuse_Definition"] TextArea="true" FullWidth="true"></MatTextField>
                                        <MatTextField @bind-Value="@bonuseVm.Description" Label=@L["Bonuse_Description"] TextArea="true" FullWidth="true"></MatTextField>
                                        <MatNumericUpDownField Label=@L["NeedMoney"]
                                                               @bind-Value="@bonuseVm.NeedAmount"
                                                               FieldType="MatNumericUpDownFieldType.Numeric"
                                                               DecimalPlaces=2>
                                        </MatNumericUpDownField>
                                        <div @onclick:stopPropagation="true" 
                                             @onclick:preventDefault="true" 
                                             @onsubmit:stopPropagation="true" 
                                             @onsubmit:preventDefault="true">
                                            <MatButton Class="d-inline" Icon="delete" OnClick="@(() => RemoveBonuse(bonuseVm))" Label="Delete"></MatButton>
                                        </div>
                                    </MatExpansionPanelDetails>
                                </MatExpansionPanel>
                            }
                        </MatAccordion>
                    </MatExpansionPanelDetails>
                </MatExpansionPanel>
            </MatAccordion>
                
        </div>
        
        <div>
            <input class="btn btn-primary" type="submit" value="@(isEditing ? "Edit" : "Create")" />
        </div>
    </EditForm>
</div>

@code {
    [Parameter]
    public int? CompanyId { get; set; } = null;
    public bool isEditing;

    private CompanyViewModel _viewModel = new CompanyViewModel {
        Theme = Theme.Education,
        isLoadedCompanyImages = true
    };
    private EditContext _editContext;
    private Company EditCompany;
    private IFileListEntry MainImage { get; set; }
    private IFileListEntry[] Images { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        if (CompanyId != null)
            EditCompany = _db.Companies
                .Include(c => c.CompanyImages)
                .Include(c => c.Bonuses)
                .SingleOrDefault(c => c.Id == CompanyId);

        if (EditCompany != null)
        {
            isEditing = true;
            _viewModel.UpdateData(EditCompany);
        }

        _editContext = new EditContext(_viewModel);
    }

    private async Task HandleValidSubmit()
    {
        if (isEditing)
        {
            await _companyService.EditCompany(EditCompany, _viewModel);
        }
        else
        {
            await _companyService.CreateCompany(_viewModel);
        }
        Console.WriteLine("OnValidSubmit @@@@@@@@@@@@@@@@@@@@@@@@@@@@");
        NavigationManager.NavigateTo("/");
    }

    async Task LoadMainImage(IFileListEntry[] files)
    {
        var file = files.FirstOrDefault();
        if (file != null)
        {
            _viewModel.isLoadedMainImage = false;
            using (var ms = new MemoryStream())
            {
                Task task1 = file.Data.CopyToAsync(ms);
                ms.Seek(0, SeekOrigin.Begin);
                await task1;
                Console.WriteLine("######### CopyEnded");
                string filePath = "TempFiles/" + $"{file.Name}-{Guid.NewGuid()}-{Path.GetExtension(file.Name)}";
                await _is3.UploadObjectAsync(ms, filePath);
                string urlLink = _is3.GetPublicURL(filePath, file.Name);
                Console.WriteLine("######### UploadedToS3");

                _viewModel.MainImage = urlLink;
                _viewModel.isLoadedMainImage = true;
                _editContext.Validate();
                Toaster.Add(L["Toaster_LoadMainImage_Message"], MatToastType.Success, L["Toaster_LoadImage_Title"]);
                StateHasChanged();
            }
        }
    }

    async Task LoadImages(IFileListEntry[] files)
    {
        List<string> urlLinks = new List<string>();
        if (files != null && files.Length > 0)
        {
            _viewModel.isLoadedCompanyImages = false;
            foreach (var file in files)
            {
                using (var ms = new MemoryStream())
                {
                    Task task1 = file.Data.CopyToAsync(ms);
                    ms.Seek(0, SeekOrigin.Begin);
                    await task1;
                    Console.WriteLine("######### CopyEnded");
                    string filePath = "TempFiles/" + $"{file.Name}-{Guid.NewGuid()}-{Path.GetExtension(file.Name)}";
                    await _is3.UploadObjectAsync(ms, filePath);
                    urlLinks.Add(_is3.GetPublicURL(filePath, file.Name));
                    Console.WriteLine("######### UploadedToS3");
                }
            }
            _viewModel.Images = urlLinks;
            _viewModel.isLoadedCompanyImages = true;
            _editContext.Validate();
            Toaster.Add(L["Toaster_LoadImages_Message"], MatToastType.Success, L["Toaster_LoadImage_Title"]);
            StateHasChanged();
            Console.WriteLine("Images Loaded ------------------------------");
        }
    }

    public void AddBonuse()
    {
        var bonuse = new Bonuse();
        _viewModel.Bonuses.Add(new BonuseViewModel(bonuse));
        if (isEditing)
        {
            EditCompany.Bonuses.Add(bonuse);
        }
    }

    public void RemoveBonuse(BonuseViewModel bonuseVm)
    {
        _viewModel.Bonuses.Remove(bonuseVm);
        if (isEditing)
        {
            EditCompany.Bonuses.Remove(bonuseVm.bonuse);
        }
        StateHasChanged();
    }
}
