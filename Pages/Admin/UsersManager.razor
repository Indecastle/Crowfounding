@page "/Admin/UsersManager"
@inject ApplicationDbContext _db
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<User> _userManager
@inject NavigationManager NavigationManager
@attribute [Authorize]
<h3>UsersManager</h3>
<div class="nl" id="myTable">
    <table class="table table-striped results display table">
        <thead>
            <tr>
                <th><input type="checkbox" id="select_all" title="All" @bind="AllSelectBox" @onclick="SelectAll"></th>
                <th>Name</th>
                <th>Email</th>
                <th>Data Registration</th>
                <th>Last Login</th>
                <th>Active</th>
                <th></th>
            </tr>

        </thead>
        <tbody>
            @foreach (var user in employees)
            {
                <tr>
                    <td> <input name="selectedUsers" class="checkbox" type="checkbox" @bind="user.IsSelect"> </td>
                    <td>@user.user.Name</td>
                    <td>@user.user.Email</td>
                    <td>@user.user.DateRegister</td>
                    <td>@user.user.DataLogin</td>
                    <td>
                        @if (user.user.IsBlocked)
                        {
                            <ion-icon name="lock"></ion-icon>
                        }
                        else
                        {
                            <ion-icon name="unlock"></ion-icon>
                        }
                    </td>
                    <td>

                        <a class="btn btn-sm btn-primary" asp-controller="Roles" asp-action="Edit" asp-route-userid="@user.user.Id">Права доступа</a>
                        <a class="btn btn-sm btn-primary" asp-controller="Admin" asp-action="AdminLogin" asp-route-userid="@user.user.Id">Login</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

@code {
    List<Employee> employees { get; set; } = new List<Employee>();
    public User user { get; set; }
    List<User> UsersAll { get; set; }
    public string NameChat { get; set; }
    public bool AllSelectBox;

    public class Employee
    {
        public User user { get; set; }
        public bool IsSelect { get; set; }
        public Employee(User user)
        {
            this.user = user;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var claimUser = authState.User;
        user = await _userManager.GetUserAsync(claimUser);

        UsersAll = _db.Users.Where(u => u.Id != user.Id).ToList();
        employees = UsersAll.Select(u => new Employee(u)).ToList();
    }


    public void SelectAll(MouseEventArgs e)
    {
        employees.ForEach(emp => emp.IsSelect = !AllSelectBox);
        StateHasChanged();
    }
}
