@page "/Admin/UsersManager"
@inject ApplicationDbContext _db
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<User> _userManager
@inject NavigationManager NavigationManager
@attribute [Authorize]
<h3>UsersManager</h3>

<div class="container-fluid">
    <div class="row">
        <div class="col-8">
            <div class="form-row align-items-center">
                <div class="col-sm-3 my-1">
                    <label class="sr-only" for="inlineFormInputGroupUsername">Имя пользователя</label>
                    <div class="input-group">
                        <div class="input-group-prepend">
                            <div class="input-group-text">Name: </div>
                        </div>
                        <input type="text" class="form-control" id="inlineFormInputGroupUsername" placeholder="Имя пользователя" @oninput="FilterFunc">
                    </div>
                </div>
                <div class="col-auto my-1">
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" id="autoSizingCheck2">
                        <label class="form-check-label" for="autoSizingCheck2">
                            Remember me
                        </label>
                    </div>
                </div>
                <div class="col-auto my-1">
                    <button type="submit" class="btn btn-primary">Submit</button>
                </div>
            </div>


            <div class="nl" id="myTable">
                <table class="table table-striped results display table">
                    <thead>
                        <tr>
                            <th><input type="checkbox" id="select_all" title="All" @bind="AllSelectBox" @onclick="SelectAll"></th>
                            <th>Name</th>
                            <th>Email</th>
                            <th>Data Registration</th>
                            <th>Last Login</th>
                            <th>Active</th>
                            <th></th>
                        </tr>

                    </thead>
                    <tbody>
                        @foreach (var user in FilterEmployees)
                        {
                            <tr>
                                <td> <input name="selectedUsers" class="checkbox" type="checkbox" @bind="user.IsSelect"> </td>
                                <td>@user.user.Name</td>
                                <td>@user.user.Email</td>
                                <td>@user.user.DateRegister</td>
                                <td>@user.user.DataLogin</td>
                                <td>
                                    @if (user.user.IsBlocked)
                                    {
                                        <ion-icon name="lock"></ion-icon>
                                    }
                                    else
                                    {
                                        <ion-icon name="unlock"></ion-icon>
                                    }
                                </td>
                                <td>

                                    <a class="btn btn-sm btn-primary" @onclick="(e => ChangeRules(user))">Права доступа</a>
                                    <a class="btn btn-sm btn-primary">Login</a>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
        <div class="col-4">
            @if (ChangeRuleUser != null)
            {
                <UserManagerRules User="ChangeRuleUser" />
            }
        </div>
    </div>
</div>




@code {
    public User ChangeRuleUser { get; set; }

    List<Employee> Employees { get; set; } = new List<Employee>();
    List<Employee> FilterEmployees { get; set; } = new List<Employee>();
    public User user { get; set; }
    List<User> UsersAll { get; set; }
    public string NameChat { get; set; }
    public bool AllSelectBox;

    public class Employee
    {
        public User user { get; set; }
        public bool IsSelect { get; set; }
        public Employee(User user)
        {
            this.user = user;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var claimUser = authState.User;
        user = await _userManager.GetUserAsync(claimUser);

        //UsersAll = _db.Users.Where(u => u.Id != user.Id).ToList();
        UsersAll = _db.Users.ToList();
        Employees = UsersAll.Select(u => new Employee(u)).ToList();
        FilterEmployees = Employees;
    }


    public async Task FilterFunc(ChangeEventArgs e)
    {
        string str = e.Value.ToString();
        FilterEmployees = string.IsNullOrWhiteSpace(str) ? Employees : Employees.Where(c => c.user.Name.ToLower().Contains(str.ToLower())).ToList();
    }

    public void SelectAll(MouseEventArgs e)
    {
        FilterEmployees.ForEach(emp => emp.IsSelect = !AllSelectBox);
        StateHasChanged();
    }

    public void ChangeRules(Employee user)
    {
        ChangeRuleUser = user.user;
        StateHasChanged();
    }
}
