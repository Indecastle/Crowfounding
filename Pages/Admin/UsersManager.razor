@page "/Admin/UsersManager"
@inject ApplicationDbContext _db
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<User> _userManager
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime;
@inject IStringLocalizer<UsersManager> L
@attribute [Authorize(Roles = "Admin, SuperAdmin")]
<h3>@L["Title"]</h3>

<div class="container-fluid">
    <div class="row">
        <div class="col-10">
            <div class="form-row align-items-center">
                <div class="col-sm-3 my-1">
                    <label class="sr-only" for="inlineFormInputGroupUsername">@L["Name_two"]</label>
                    <div class="input-group">
                        <div class="input-group-prepend">
                            <div class="input-group-text">@L["Name"]: </div>
                        </div>
                        <input type="text" class="form-control" id="inlineFormInputGroupUsername" placeholder="@L["Name_two"]" @bind="SearchText" @oninput="(e => FilterFunc(e.Value.ToString()))">
                    </div>
                </div>
                <div class="col-auto my-1">
                    <button type="submit" class="btn btn-primary" @onclick="(e => BlockRange())">@L["Block"]</button>
                </div>
                <div class="col-auto my-1">
                    <button type="submit" class="btn btn-primary" @onclick="(e => BlockRange(false))">@L["UnBlock"]</button>
                </div>
            </div>


            <div class="nl" id="myTable">
                <table class="table table-striped results display table">
                    <thead>
                        <tr>
                            <th><input type="checkbox" id="select_all" title="All" @bind="@AllSelectBox" @onclick="SelectAll"></th>
                            <th>@L["Table_Name"]</th>
                            <th>@L["Table_Email"]</th>
                            <th>@L["Table_Data"]</th>
                            <th>@L["Table_LastLogin"]Last Login</th>
                            <th>@L["Table_Active"]</th>
                            <th></th>
                        </tr>

                    </thead>
                    <tbody>
                        @foreach (var user in FilterModUsers)
                        {
                            <tr>
                                <td> <input name="selectedUsers" class="checkbox" type="checkbox" @bind="user.IsSelect" @onclick="(e => SelectOne(user))"> </td>
                                <td>@user.user.Name</td>
                                <td>@user.user.Email</td>
                                <td>@user.user.DateRegister</td>
                                <td>@user.user.DataLogin</td>
                                <td @onclick="(e => Block(user))">
                                    @if (user.user.IsBlocked)
                                    {
                                        <div><i class="fas fa-lock"></i></div>
                                    }
                                    else
                                    {
                                        <div><i class="fas fa-lock-open"></i></div>
                                    }
                                </td>
                                <td>
                                    <button class="btn btn-sm btn-primary" @onclick="(e => ChangeRules(user))">Права доступа</button>
                                    <button class="btn btn-sm btn-primary" @onclick="(e => Login(user))">Login</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
        <div class="col-2">
            @if (ChangeRuleUser != null)
            {
                <UserManagerRules User="user" TargetUser="ChangeRuleUser" OnClickCallback="OnHide" />
            }
        </div>
    </div>
</div>




@code {
    public User ChangeRuleUser { get; set; }

    List<ModUser> ModUsers { get; set; } = new List<ModUser>();
    List<ModUser> FilterModUsers { get; set; } = new List<ModUser>();
    public User user { get; set; }
    IEnumerable<User> UsersAll { get; set; }
    public string NameChat { get; set; }
    public string SearchText { get; set; }
    [Parameter]
    public bool AllSelectBox { get; set; }

    public class ModUser
    {
        public User user { get; set; }
        public bool IsSelect { get; set; }
        public bool IsSuperAdmin { get; set; }
        public ModUser(User user)
        {
            this.user = user;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var claimUser = authState.User;
        user = await _userManager.GetUserAsync(claimUser);

        IList<User> superAdmins = await _userManager.GetUsersInRoleAsync("SuperAdmin");
        if (await _userManager.IsInRoleAsync(user, "SuperAdmin") == false)
            UsersAll = (await _db.Users.ToListAsync()).Except(superAdmins);
        else
            UsersAll = _db.Users.AsQueryable();

        ModUsers = UsersAll.Select(u => new ModUser(u)).ToList();
        FilterModUsers = ModUsers;
    }


    public void FilterFunc(string searchText)
    {
        FilterModUsers = string.IsNullOrWhiteSpace(searchText) ? ModUsers : ModUsers.Where(c => c.user.Name.ToLower().Contains(searchText.ToLower())).ToList();
    }

    public void SelectAll(MouseEventArgs e)
    {
        FilterModUsers.ForEach(emp => emp.IsSelect = !AllSelectBox);
        StateHasChanged();
    }

    public void SelectOne(ModUser emp)
    {
        if (emp.IsSelect == true) // reverse
            AllSelectBox = false;
    }

    public void ChangeRules(ModUser user)
    {
        ChangeRuleUser = ChangeRuleUser != user.user ? user.user : null;
        StateHasChanged();
    }

    private void Login(ModUser modUser)
    {
        var user = modUser.user;
        var uri = new Uri(NavigationManager.Uri)
            .GetComponents(UriComponents.PathAndQuery, UriFormat.Unescaped);
        var query = $"?userId={Uri.EscapeDataString(user.Id)}&" +
            $"redirectUri={Uri.EscapeDataString(uri)}";

        NavigationManager.NavigateTo("/Admin/AdminLogin" + query, forceLoad: true);
    }

    public async Task Block(ModUser modUser)
    {
        var user = modUser.user;
        if (!(user.Id == this.user.Id && !user.IsBlocked))
        {
            user.IsBlocked = !user.IsBlocked;
            _db.SaveChanges();
        }

        FilterFunc(SearchText);
        StateHasChanged();
    }

    public void OnHide()
    {
        ChangeRuleUser = null;
    }

    public void BlockRange(bool isBlocked = true)
    {
        List<ModUser> filterEmp = FilterModUsers.Where(emp => emp.IsSelect).ToList();
        foreach (var user in filterEmp.Select(emp => emp.user))
        {
            if (!(user.Id == this.user.Id && !user.IsBlocked))
                user.IsBlocked = isBlocked;
        }
        _db.SaveChanges();
        StateHasChanged();
    }
}
